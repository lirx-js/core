import { Context } from '../context.class.private';

/*-------*/

export type ISignalChangeListener = () => void;

const SIGNAL_CHANGE_CONTEXT = new Context<ISignalChangeListener | undefined>(undefined);

export function getCurrentSignalChangeListener(): ISignalChangeListener | undefined {
  return SIGNAL_CHANGE_CONTEXT.get();
}

export function isInSignalContext(): boolean {
  return getCurrentSignalChangeListener() !== undefined;
}

export function runSignalChangeContextOnce<GReturn>(
  callback: () => GReturn,
  onChange: ISignalChangeListener,
): GReturn {
  let running: boolean = true;
  return SIGNAL_CHANGE_CONTEXT.run((): void => {
    if (running) {
      running = false;
      onChange();
    }
  }, callback);
}

export function runSignalChangeContext<GReturn>(
  callback: () => GReturn,
  onChange: ISignalChangeListener,
): GReturn {
  return SIGNAL_CHANGE_CONTEXT.run(onChange, callback);
}

/**
 * Runs a context in which signals are not observed.
 */
export function runOutsideSignalChangeContext<GReturn>(callback: () => GReturn): GReturn {
  return SIGNAL_CHANGE_CONTEXT.run<GReturn>(undefined, callback);
}
